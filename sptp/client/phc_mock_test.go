/*
Copyright (c) Facebook, Inc. and its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: time/sptp/client/clock.go

// Package client is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockPHCIface is a mock of PHCIface interface
type MockPHCIface struct {
	ctrl     *gomock.Controller
	recorder *MockPHCIfaceMockRecorder
}

// MockPHCIfaceMockRecorder is the mock recorder for MockPHCIface
type MockPHCIfaceMockRecorder struct {
	mock *MockPHCIface
}

// NewMockPHCIface creates a new mock instance
func NewMockPHCIface(ctrl *gomock.Controller) *MockPHCIface {
	mock := &MockPHCIface{ctrl: ctrl}
	mock.recorder = &MockPHCIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPHCIface) EXPECT() *MockPHCIfaceMockRecorder {
	return m.recorder
}

// AdjFreqPPB mocks base method
func (m *MockPHCIface) AdjFreqPPB(freq float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjFreqPPB", freq)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjFreqPPB indicates an expected call of AdjFreqPPB
func (mr *MockPHCIfaceMockRecorder) AdjFreqPPB(freq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjFreqPPB", reflect.TypeOf((*MockPHCIface)(nil).AdjFreqPPB), freq)
}

// Step mocks base method
func (m *MockPHCIface) Step(step time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step", step)
	ret0, _ := ret[0].(error)
	return ret0
}

// Step indicates an expected call of Step
func (mr *MockPHCIfaceMockRecorder) Step(step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockPHCIface)(nil).Step), step)
}

// FrequencyPPB mocks base method
func (m *MockPHCIface) FrequencyPPB() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FrequencyPPB")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FrequencyPPB indicates an expected call of FrequencyPPB
func (mr *MockPHCIfaceMockRecorder) FrequencyPPB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FrequencyPPB", reflect.TypeOf((*MockPHCIface)(nil).FrequencyPPB))
}

// MaxFreqPPB mocks base method
func (m *MockPHCIface) MaxFreqPPB() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxFreqPPB")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxFreqPPB indicates an expected call of MaxFreqPPB
func (mr *MockPHCIfaceMockRecorder) MaxFreqPPB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxFreqPPB", reflect.TypeOf((*MockPHCIface)(nil).MaxFreqPPB))
}
